#!/bin/sh -e

PORT=$(basename $(pwd)|awk -F- '{print $2}')
BASE=$(dirname $(readlink $0))
APP_DIR=$BASE/app
THISDIR=`pwd`

if [ -e $BASE/unicorn_rails ]; then
  UNICORN_RAILS=$BASE/unicorn_rails
else
  UNICORN_RAILS=unicorn_rails
fi

if [ -z "$PORT" ]; then
  echo "usage: $0 port" 1>&2;
  exit 2
fi

if [ ! -d "$APP_DIR" ]; then
  echo "no such app dir: $APP_DIR (did you create a symlink to your Rails app?)" 1>&2;
  exit 2
fi

cat <<EOF > unicorn.rb
rails_env = ENV['RAILS_ENV'] || 'production'

# 10 workers and 1 master
worker_processes (rails_env == 'production' ? 10 : 4)

preload_app true

# Restart any workers that haven't responded in 30 seconds
timeout 30

# Listen on a Unix data socket
listen '127.0.0.1:$PORT', :backlog => 2048


# http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end


before_fork do |server, worker|
  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  old_pid = RAILS_ROOT + '/tmp/pids/unicorn.pid.oldbin'
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end


after_fork do |server, worker|
  ##
  # Unicorn master loads the app then forks off workers - because of the way
  # Unix forking works, we need to make sure we aren't using any of the parent's
  # sockets, e.g. db connection

  ActiveRecord::Base.establish_connection
  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket
end
EOF

cd $APP_DIR && exec $UNICORN_RAILS -E production -c $THISDIR/unicorn.rb
